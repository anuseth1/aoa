1 LINUX SHELL SCRIPT 

#!bin/sh
echo "__________"
echo "OS Info"
cat /etc/os-release
uname -r
uname -a
uname -v
echo "__________"
echo "10 processes in descending order"
ps -eo pid,ppid,cmd,%mem,%cpu --sort=%mem|head -10
echo "__________"
echo "Highest memory usage"
ps -eo pid,ppid,cmd,%mem,%cpu --sort=%mem|head -2
echo "__________"
echo "user login and name"
whoami
logname
echo "$SHELL"
pwd
uname -srm
echo "__________"

mkdir anu
cd anu
touch exp2.c
bash exp2.c

2 LINUX COMMAND COPY ONE FILE TO ANOTHER

FILE1(file1.c)
#include <stdio.h>
#include <stdlib.h>
int main()
{
FILE *fptr1, *fptr2;
char filename[100],c;
printf("Enter the filename to open for reading \n");
scanf("%s", filename);
fptr1=fopen(filename, "r");
if(fptr1==NULL)
{
printf("Cannot open file %s\n", filename);
exit(0);
}
printf("Enter the filename to open for writing \n");
scanf("%s", filename);
fptr2=fopen(filename, "w");
if(fptr2==NULL)
{
printf("Cannot open file %s\n", filename);
exit(0);
}
c=fgetc(fptr1);
while(c!=EOF)
{
fputc(c, fptr2);
c=fgetc(fptr1);
}
printf("contents copied to %s\n", filename);
fclose(fptr1);
fclose(fptr2);
return 0;
}
FILE2(file2.txt)
abcdefghijklmnopq

commands in terminal:
cd desktop/
mkdir abc
cd abc/
touch file1.c
touch file2.txt
gcc -o file1 file1.c
./file1

3 OBTAIN PROCESS ID CHILD AND PARENT

#include<stdio.h>
#include<stdlib.h>
int fork();
int getpid();
int getppid();
int main(){
int pid = fork();
if(pid == 0){
printf("this is the child process.my pid is %d and my parents id is %d\n", getpid(),getppid());
}
else{
printf("this is the parent process.my pid is %d and my id is %d.\n", getpid(),pid);
}
return 0;
}

4 NON-PREMPTIVE SCHEDULING (FCFS)

#include<stdio.h>
void findWaitingTime(int processes[], int n, int bt[], int wt[])
{
wt[0]=0;
for(int i=1;i<n;i++)
wt[i]=bt[i-1]+wt[i-1];
}
void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[])
{
for (int i=0;i<n;i++)
tat[i]=bt[i]+wt[i];
}
void findAverageTime(int processes[], int n, int bt[])
{
int wt[n],tat[n];
findWaitingTime(processes, n, bt, wt);
findTurnAroundTime(processes, n, bt, wt, tat);
float total_wt=0, total_tat=0;
for(int i=0;i<n;i++)
{
total_wt+=wt[i];
total_tat+=tat[i];
}
printf("Average Waiting Time:%.2f\n",total_wt/n);
printf("Average Turnaround Time:%.2f\n",total_tat/n);
}
int main()
{
int n;
printf("Enter the number of processes:");
scanf("%d",&n);
int processes[n], burst_time[n];
printf("Enter the arrival time and burst time for each process:\n");
for(int i=0;i<n;i++)
{
printf("Process %d:",i+1);
scanf("%d%d",&processes[i],&burst_time[i]);
}
findAverageTime(processes, n, burst_time);
return 0;
}
commands:
cd desktop
gcc fcfs.c -o fcfs
./fcfs

5 PRE-EMPTIVE SCHEDULING

#include<stdio.h>
void findWaitingTime(int processes[], int n, int bt[], int wt[], int priority[])
{
int pos, temp;
wt[0]=0;
for(int i=1;i<n;i++)
{
wt[i]=bt[i-1]+wt[i-1];
}
}
void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[])
{
for(int i=0;i<n;i++)
tat[i]=bt[i]+wt[i];
}
void findAverageTime(int processes[], int n, int bt[], int priority[])
{
int wt[n], tat[n];
findWaitingTime(processes, n, bt, wt, priority);
findTurnAroundTime(processes, n, bt, wt, tat);
float total_wt=0, total_tat=0;
for (int i=0;i<n;i++)
{
total_wt+=wt[i];
total_tat+=tat[i];
}
printf("Average Waiting Time:%.2f\n",total_wt/n);
printf("Average Turnaround Time:%.2f\n",total_tat/n);
}
int main()
{
int n;
printf("Enter the number of processes:");
scanf("%d",&n);
int processes[n], burst_time[n], priority[n];
printf("Enter the burst time & priority for each process:\n");
for(int i=0;i<n;i++)
{
printf("Process %d:",i+1);
scanf("%d%d",&burst_time[i],&priority[i]);
processes[i]=i+1;
}
for(int i=0;i<n-1;i++)
{
int pos=i;
for(int j=i+1;j<n;j++)
{
if(priority[j]<priority[pos])
pos=j;
}
int temp=priority[i];
priority[i]=priority[pos];
priority[pos]=temp;
temp=burst_time[i];
burst_time[i]=burst_time[pos];
burst_time[pos]=temp;
temp=processes[i];
processes[i]=processes[pos];
processes[pos]=temp;
}
findAverageTime(processes, n, burst_time, priority);
return 0;
}
cd desktop
gcc p.c -o p
./p

6 PRODUCER CONSUMER PROBLEM SEMAPHORE

#include <stdio.h>
#include <stdlib.h>
int mutex = 1;
int full = 0;
int empty = 10, x = 0;
void producer()
{
 --mutex;
 ++full;
 --empty;
 x++;
 printf("\nProducer produces"
 "item %d",
 x);
 ++mutex;
}
void consumer()
{
 --mutex;
 --full;
 ++empty;
 printf("\nConsumer consumes "
 "item %d",
 x);
 x--;
 ++mutex;
}
int main()
{
 int n, i;
 printf("\n1. Press 1 for Producer"
 "\n2. Press 2 for Consumer"
 "\n3. Press 3 for Exit");
#pragma omp critical
 for (i = 1; i > 0; i++) {
 printf("\nEnter your choice:");
 scanf("%d", &n);
 switch (n) {
 case 1:
 if ((mutex == 1)
 && (empty != 0)) {
 producer();
 }
 else {
 printf("Buffer is full!");
 }
 break;
 case 2:
 if ((mutex == 1)
 && (full != 0)) {
 consumer();
 }
 else {
 printf("Buffer is empty!");
 }
 break;
 case 3:
 exit(0);
 break;
 }
 }
}
CD DESKTOP
GCC SEMAPHORE.C -O SEMA4
./SEMA4


7 DEADLOCK AVOIDANCE BANKERS 

#include<stdio.h>
int main() {
 int p, c, count = 0, i, j, alc[5][3], max[5][3], need[5][3], safe[5], available[3], done[5], terminate = 
0;
 printf("Enter the number of process and resources");
 scanf("%d %d", & p, & c);
 printf("enter allocation of resource of all process %dx%d matrix", p, c);
 for (i = 0; i < p; i++) {
 for (j = 0; j < c; j++) {
 scanf("%d", & alc[i][j]);
 }
 }
 printf("enter the max resource process required %dx%d matrix", p, c);
 for (i = 0; i < p; i++) {
 for (j = 0; j < c; j++) {
 scanf("%d", & max[i][j]);
 }
 }
 printf("enter the available resource");
 for (i = 0; i < c; i++)
 scanf("%d", & available[i]);
 printf("\n need resources matrix are\n");
 for (i = 0; i < p; i++) {
 for (j = 0; j < c; j++) {
 need[i][j] = max[i][j] - alc[i][j];
 printf("%d\t", need[i][j]);
 }
 printf("\n");
 }
 for (i = 0; i < p; i++) {
 done[i] = 0;
 }
 while (count < p) {
 for (i = 0; i < p; i++) {
 if (done[i] == 0) {
 for (j = 0; j < c; j++) {
 if (need[i][j] > available[j])
 break;
 }
 if (j == c) {
 safe[count] = i;
 done[i] = 1;
 for (j = 0; j < c; j++) {
 available[j] += alc[i][j];
 }
 count++;
 terminate = 0;
 } else {
 terminate++;
 }
 }
 }
 if (terminate == (p - 1)) {
 printf("safe sequence does not exist");
 break;
 }
 }
 if (terminate != (p - 1)) {
 printf("\n available resource after completion\n");
 for (i = 0; i < c; i++) {
 printf("%d\t", available[i]);
 }
 printf("\n safe sequence are\n");
 for (i = 0; i < p; i++) {
 printf("p%d\t", safe[i]);
 }
 }
 return 0;
}
GCC EXP7.C -O EXP7
./EXP7


8 FIRST FIT

#include<stdio.h> 
void firstFit(int blockSize[], int m, int processSize[], int n) 
{ 
 int i, j; 
 int allocation[n]; 
 for(i = 0; i < n; i++) 
 { 
 allocation[i] = -1; 
 } 
 for (i = 0; i < n; i++) 
 { 
 for (j = 0; j < m; j++) 
 { 
 if (blockSize[j] >= processSize[i]) 
 {
 allocation[i] = j; 
 blockSize[j] -= processSize[i]; 
 break; 
 } 
 } 
 } 
 printf("\nProcess No.\tProcess Size\tBlock no.\n"); 
 for (int i = 0; i < n; i++) 
 { 
 printf(" %i\t\t\t", i+1); 
 printf("%i\t\t\t\t", processSize[i]); 
 if (allocation[i] != -1) 
 printf("%i", allocation[i] + 1); 
 else
 printf("Not Allocated"); 
 printf("\n"); 
 } 
} 
int main() 
{ 
 int m; 
 int n; 
 int blockSize[] = {100, 500, 200, 300, 600}; 
 int processSize[] = {212, 417, 112, 426}; 
 m = sizeof(blockSize) / sizeof(blockSize[0]); 
 n = sizeof(processSize) / sizeof(processSize[0]); 
 firstFit(blockSize, m, processSize, n); 
 return 0 ; 
} 
CD DESKTOP
GCC BEST.C -O BEST
./BEST

9 REPLACEMENT POLICIES FIFO,LIFO,OPTIMAL
1 FIFO
#include<stdio.h>
int main()
{
int i,j,n,a[50],frame[10],no,k,avail,count=0;
printf("\n ENTER THE NUMBER OF PAGES:\n");
scanf("%d",&n);
printf("\n ENTER THE PAGE NUMBER :\n");
for(i=1;i<=n;i++)
scanf("%d",&a[i]);
printf("\n ENTER THE NUMBER OF FRAMES :");
scanf("%d",&no);
for(i=0;i<no;i++)
frame[i]= -1;
j=0;
printf("\tref string\t page frames\n");
for(i=1;i<=n;i++)
{
printf("%d\t\t",a[i]);
avail=0;
for(k=0;k<no;k++)
if(frame[k]==a[i])
avail=1;
if (avail==0)
{
frame[j]=a[i];
j=(j+1)%no;
count++;
for(k=0;k<no;k++)
printf("%d\t",frame[k]);
}
printf("\n");
}
 printf("Page Fault Is %d",count);
 return 0;
}
CD DESKTOP
GCC FIFO.C -O FIFO
./FIFO


10 DISK SCHEDULING (sstf)

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
// Function to calculate the absolute difference between two numbers
int abs_diff(int a, int b) {
 return abs(a - b);
}
// Function to find the index of the shortest seek time request
int find_shortest_seek_time(int *requests, int num_requests, int head_position) {
 int shortest_seek_time = INT_MAX;
 int shortest_index = -1;
 for (int i = 0; i < num_requests; i++) {
 if (!requests[i]) {
 continue; // Skip processed requests
 }
 int seek_time = abs_diff(requests[i], head_position);
 if (seek_time < shortest_seek_time) {
 shortest_seek_time = seek_time;
 shortest_index = i;
 }
 }
 return shortest_index;
}
// Function to calculate the total seek time
int calculate_seek_time(int *requests, int num_requests, int start_position) {
 int total_seek_time = 0;
 int head_position = start_position;
 for (int i = 0; i < num_requests; i++) {
 int shortest_index = find_shortest_seek_time(requests, num_requests, head_position);
 if (shortest_index == -1) {
 break; // All requests processed
 }
 total_seek_time += abs_diff(requests[shortest_index], head_position);
 head_position = requests[shortest_index];
 requests[shortest_index] = 0; // Mark request as processed
 }
 return total_seek_time;
}
int main() {
 int num_requests, start_position;
 printf("Enter the number of disk requests: ");
 scanf("%d", &num_requests);
 printf("Enter the starting head position: ");
 scanf("%d", &start_position);
 int *requests = (int *)malloc(num_requests * sizeof(int));
 if (requests == NULL) {
 printf("Memory allocation failed\n");
 return 1;
 }
 printf("Enter the disk request positions:\n");
 for (int i = 0; i < num_requests; i++) {
 scanf("%d", &requests[i]);
 }
 int total_seek_time = calculate_seek_time(requests, num_requests, start_position);
 printf("Total seek time using SSTF: %d\n", total_seek_time);
 free(requests);
 return 0;
}
